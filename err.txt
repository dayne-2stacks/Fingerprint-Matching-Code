Annotation file saved at: data/L3SFV2Augmented/train-(320, 240).json
cuda:0
=== SiameseSConvOnNodes init: input_node_dim = 1024
=== SConv init: input_features = 1024 output_features = 1024
=== Creating SplineConv layer 0 with in_channels = 1024
=== Creating SplineConv layer 1 with in_channels = 1024
=== Data Dict Keys: ['Ps', 'ns', 'es', 'gt_perm_mat', 'Gs', 'Hs', 'As', 'pyg_graphs', 'cls', 'id_list', 'univ_size', 'images', 'KGHs_sparse', 'KGHs', 'batch_size', 'num_graphs']
=== KGHs: [<src.sparse_torch.csx_matrix.CSRMatrix3d object at 0x7645093c4710>, <src.sparse_torch.csx_matrix.CSCMatrix3d object at 0x7645093c4610>]
=== Processing graph 0 ===
=== CNN nodes shape: torch.Size([4, 512, 30, 40])
=== CNN edges shape: torch.Size([4, 512, 15, 20])
=== Final layers output shape: torch.Size([4, 512])
=== Normalized nodes shape: torch.Size([4, 512, 30, 40])
=== Normalized edges shape: torch.Size([4, 512, 15, 20])
=== Aligned features U shape: torch.Size([776, 512])
=== Aligned features F shape: torch.Size([776, 512])
=== Concatenated node_features shape: torch.Size([776, 1024])
=== Set graph.x shape: torch.Size([776, 1024])
=== Before message_pass_node_features, graph.x shape: torch.Size([776, 1024])
=== [SiameseSConvOnNodes.forward] Received graph.x shape = torch.Size([776, 1024])
=== [SConv.forward] Input x.shape = torch.Size([776, 1024])
=== [SConv.forward] First conv weight.shape = torch.Size([25, 1024, 1024])
=== [SConv.forward] After layer 0 x.shape = torch.Size([776, 1024])
=== [SConv.forward] After final layer x.shape = torch.Size([776, 1024])
=== [SiameseSConvOnNodes.forward] SConv result shape = torch.Size([776, 1024])
=== [SiameseSConvOnNodes.forward] Updated graph.x shape = torch.Size([776, 1024])
=== After message_pass_node_features, graph.x shape: torch.Size([776, 1024])
Graph visualization saved as photos/graph_0.png
Graph visualization saved as photos/graph_1.png
Graph visualization saved as photos/graph_2.png
Graph visualization saved as photos/graph_3.png
=== Image size: torch.Size([4, 3, 240, 320])
=== Processing graph 1 ===
=== CNN nodes shape: torch.Size([4, 512, 30, 40])
=== CNN edges shape: torch.Size([4, 512, 15, 20])
=== Final layers output shape: torch.Size([4, 512])
=== Normalized nodes shape: torch.Size([4, 512, 30, 40])
=== Normalized edges shape: torch.Size([4, 512, 15, 20])
=== Aligned features U shape: torch.Size([776, 512])
=== Aligned features F shape: torch.Size([776, 512])
=== Concatenated node_features shape: torch.Size([776, 1024])
=== Set graph.x shape: torch.Size([776, 1024])
=== Before message_pass_node_features, graph.x shape: torch.Size([776, 1024])
=== [SiameseSConvOnNodes.forward] Received graph.x shape = torch.Size([776, 1024])
=== [SConv.forward] Input x.shape = torch.Size([776, 1024])
=== [SConv.forward] First conv weight.shape = torch.Size([25, 1024, 1024])
=== [SConv.forward] After layer 0 x.shape = torch.Size([776, 1024])
=== [SConv.forward] After final layer x.shape = torch.Size([776, 1024])
=== [SiameseSConvOnNodes.forward] SConv result shape = torch.Size([776, 1024])
=== [SiameseSConvOnNodes.forward] Updated graph.x shape = torch.Size([776, 1024])
=== After message_pass_node_features, graph.x shape: torch.Size([776, 1024])
Graph visualization saved as photos/graph_0.png
Graph visualization saved as photos/graph_1.png
Graph visualization saved as photos/graph_2.png
Graph visualization saved as photos/graph_3.png
=== Image size: torch.Size([4, 3, 240, 320])
=== Global weights shapes: [torch.Size([4, 1024])]
